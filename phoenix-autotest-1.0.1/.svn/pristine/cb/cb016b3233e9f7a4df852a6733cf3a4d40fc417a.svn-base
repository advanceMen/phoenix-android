<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- NewPage -->
<html lang="zh">
<head>
<!-- Generated by javadoc (version 1.7.0_01) on Mon Feb 24 10:26:24 CST 2014 -->
<meta http-equiv="Content-Type" content="text/html" charset="UTF-8">
<title>Action</title>
<meta name="date" content="2014-02-24">
<link rel="stylesheet" type="text/css" href="../../../stylesheet.css" title="Style">
</head>
<body>
<script type="text/javascript"><!--
    if (location.href.indexOf('is-external=true') == -1) {
        parent.document.title="Action";
    }
//-->
</script>
<noscript>
<div>您的浏览器已禁用 JavaScript。</div>
</noscript>
<!-- ========= START OF TOP NAVBAR ======= -->
<div class="topNav"><a name="navbar_top">
<!--   -->
</a><a href="#skip-navbar_top" title="跳过导航链接"></a><a name="navbar_top_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">概览</a></li>
<li><a href="package-summary.html">程序包</a></li>
<li class="navBarCell1Rev">类</li>
<li><a href="class-use/Action.html">使用</a></li>
<li><a href="package-tree.html">树</a></li>
<li><a href="../../../deprecated-list.html">已过时</a></li>
<li><a href="../../../index-files/index-1.html">索引</a></li>
<li><a href="../../../help-doc.html">帮助</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>上一个类</li>
<li><a href="../../../phoenix/frame/action/KeyControl.html" title="phoenix.frame.action中的类"><span class="strong">下一个类</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?phoenix/frame/action/Action.html" target="_top">框架</a></li>
<li><a href="Action.html" target="_top">无框架</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_top">
<li><a href="../../../allclasses-noframe.html">所有类</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_top");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>概要:&nbsp;</li>
<li>嵌套&nbsp;|&nbsp;</li>
<li>字段&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">方法</a></li>
</ul>
<ul class="subNavList">
<li>详细资料:&nbsp;</li>
<li>字段&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">方法</a></li>
</ul>
</div>
<a name="skip-navbar_top">
<!--   -->
</a></div>
<!-- ========= END OF TOP NAVBAR ========= -->
<!-- ======== START OF CLASS DATA ======== -->
<div class="header">
<div class="subTitle">phoenix.frame.action</div>
<h2 title="类 Action" class="title">类 Action</h2>
</div>
<div class="contentContainer">
<ul class="inheritance">
<li>java.lang.Object</li>
<li>
<ul class="inheritance">
<li><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">phoenix.frame.struct.ElementOperate</a></li>
<li>
<ul class="inheritance">
<li>phoenix.frame.action.Action</li>
</ul>
</li>
</ul>
</li>
</ul>
<div class="description">
<ul class="blockList">
<li class="blockList">
<hr>
<br>
<pre>public class <span class="strong">Action</span>
extends <a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></pre>
<div class="block">定义对浏览器和对页面元素的操作。<br>
 在该类中实现的ElementOperate中的方法，都需要在RunCases类中新增对元素的具体操作<br>
 继承 ：ElementOperate接口<br></div>
<dl><dt><span class="strong">版本:</span></dt>
  <dd>1.0</dd>
<dt><span class="strong">作者:</span></dt>
  <dd>mengfeiyang
 日期：2013年8月21日 上午10:00</dd></dl>
</li>
</ul>
</div>
<div class="summary">
<ul class="blockList">
<li class="blockList">
<!-- ======== CONSTRUCTOR SUMMARY ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_summary">
<!--   -->
</a>
<h3>构造器概要</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="构造器概要表, 列表构造器和解释">
<caption><span>构造器</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colOne" scope="col">构造器和说明</th>
</tr>
<tr class="altColor">
<td class="colOne"><code><strong><a href="../../../phoenix/frame/action/Action.html#Action()">Action</a></strong>()</code>
<div class="block">实例化职责链，获取延迟状态。</div>
</td>
</tr>
</table>
</li>
</ul>
<!-- ========== METHOD SUMMARY =========== -->
<ul class="blockList">
<li class="blockList"><a name="method_summary">
<!--   -->
</a>
<h3>方法概要</h3>
<table class="overviewSummary" border="0" cellpadding="3" cellspacing="0" summary="方法概要表, 列表方法和解释">
<caption><span>方法</span><span class="tabEnd">&nbsp;</span></caption>
<tr>
<th class="colFirst" scope="col">限定符和类型</th>
<th class="colLast" scope="col">方法和说明</th>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#BrowserSelect()">BrowserSelect</a></strong>()</code>
<div class="block">通过配置文件配置驱动类型与程序的路径。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#checkPointStatusAct(java.lang.String, java.lang.String)">checkPointStatusAct</a></strong>(java.lang.String&nbsp;checkPointStatu,
                   java.lang.String&nbsp;checkPointCaseName)</code>
<div class="block">定义检查点对元素属性检查完成后的行为。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#click()">click</a></strong>()</code>
<div class="block">对元素执行click操作<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#closeAllWindows()">closeAllWindows</a></strong>()</code>
<div class="block">关闭所有WebDriver启动的浏览器窗口<br>
 获取浏览器使用的WebDriver驱动的链表。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#closeWindow()">closeWindow</a></strong>()</code>
<div class="block">关闭当前驱动的浏览器<br>
 只是单纯的退出当前浏览器使用的驱动类型<br>
 如果启用了延迟功能，则执行关闭操作前会执行延迟等待操作<br><br>
 编写日期：2013年8月23日上午12:00</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#dealAlert()">dealAlert</a></strong>()</code>
<div class="block">消除页面弹出的Alert窗口，并返回Alert窗口上的值<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#doubleClick()">doubleClick</a></strong>()</code>
<div class="block">对元素执行doubleClick操作<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#downLoad(java.lang.String)">downLoad</a></strong>(java.lang.String&nbsp;localFilePath)</code>
<div class="block">文件下载。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#DriverSelect()">DriverSelect</a></strong>()</code>
<div class="block">驱动类型命名。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#focus()">focus</a></strong>()</code>
<div class="block">激活首次驱动分配者分配的驱动所启动的浏览器，并使其最前显示<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#fromInputBoxSetText()">fromInputBoxSetText</a></strong>()</code>
<div class="block">通过InputBox向页面特定区域传值<br>
 此方法适用以下场景：1.调试时需要输入验证码        2.需要手动向特定区域传值时<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getBrowserTitle()">getBrowserTitle</a></strong>()</code>
<div class="block">获取浏览器的标题<br></div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code><a href="../../../phoenix/frame/log/CaseStepLog.html" title="phoenix.frame.log中的类">CaseStepLog</a></code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getCaseStepLog()">getCaseStepLog</a></strong>()</code>
<div class="block">为第三方应用提供获取日志实例的接口</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String[]</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getComboBoxItems()">getComboBoxItems</a></strong>()</code>
<div class="block">获取ComboBox（下拉框）中所有的条目内容<br>
 以数据形式返回内容<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getComboBoxSelectedValue()">getComboBoxSelectedValue</a></strong>()</code>
<div class="block">获取ComboBox（下拉框）中最后一次选择的内容<br>
 以String类型返回内容<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getComboBoxSize()">getComboBoxSize</a></strong>()</code>
<div class="block">获取ComboBox（下拉框）的大小<br>
 以String类型返回大小值，之所以这样做是为了方便与数据库数据的交换<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getCurrentURL()">getCurrentURL</a></strong>()</code>
<div class="block">获取浏览器的地址信息<br></div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>org.openqa.selenium.WebDriver</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getDriver()">getDriver</a></strong>()</code>
<div class="block">分配驱动类型。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getDriverUserDefine()">getDriverUserDefine</a></strong>()</code>
<div class="block">为第三方应用提供获知当前使用的驱动类型的接口</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getOperateRemark()">getOperateRemark</a></strong>()</code>
<div class="block">方法描述：对页面单步操作的备注信息获取。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getTagText()">getTagText</a></strong>()</code>
<div class="block">元素取值操作。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>java.lang.String</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#getText(java.lang.String)">getText</a></strong>(java.lang.String&nbsp;attribute)</code>
<div class="block">元素取值操作。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#goBack()">goBack</a></strong>()</code>
<div class="block">对当前驱动下的浏览器窗口模拟回退操作.回退完成后会有2秒的等待加载时间<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#goForward()">goForward</a></strong>()</code>
<div class="block">对当前驱动下的浏览器窗口模拟前进操作.前进完成后会有2秒的等待加载时间<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#gotoWindow(java.lang.String)">gotoWindow</a></strong>(java.lang.String&nbsp;url)</code>
<div class="block">在当前浏览器窗口，重定向到另一URL地址，无需再次重复打开关闭浏览器<br>
 会向职责链通知当前执行的步骤类型与URL值<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#highLight()">highLight</a></strong>()</code>
<div class="block">高亮一个元素<br>
 此方法不需要指定元素属性<br><br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>boolean</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#isExist()">isExist</a></strong>()</code>
<div class="block">判断元素是否存在的方法。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#keyPress(java.lang.String)">keyPress</a></strong>(java.lang.String&nbsp;keys)</code>
<div class="block">通过直接操作键盘按键输入值<br>
 此方法适用以下场景：1.元素找不到时但需要输入关键字        2.需要操作键盘按键时<br>
 如果发生异常，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#maxCurrentWindow()">maxCurrentWindow</a></strong>()</code>
<div class="block">最大化当前浏览器窗口<br></div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#mouseOver()">mouseOver</a></strong>()</code>
<div class="block">将鼠标悬浮在元素上方<br>
 此方法不需要指定元素属性<br><br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#openNewWindow(java.lang.String)">openNewWindow</a></strong>(java.lang.String&nbsp;url)</code>
<div class="block">新开浏览器，创建新的浏览器进程。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#refreshWindow()">refreshWindow</a></strong>()</code>
<div class="block">对当前驱动下的浏览器窗口执行刷新操作.刷新完成后会有2秒的等待加载时间<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#runCommandLine(java.lang.String)">runCommandLine</a></strong>(java.lang.String&nbsp;commandLine)</code>
<div class="block">执行命令行命令,也可以是打包好的程序，但需要指定程序路径 <br>
 如果发生异常，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#runJavaScript(java.lang.String)">runJavaScript</a></strong>(java.lang.String&nbsp;script)</code>
<div class="block">在当前浏览器窗口执行一段JS代码,需要提供String类型JS命令<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#selectComboBoxByIndex(java.lang.String)">selectComboBoxByIndex</a></strong>(java.lang.String&nbsp;index)</code>
<div class="block">根据combobox中值的顺序进行选择，第一个是条目的值是 0<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#selectComboBoxByValue(java.lang.String)">selectComboBoxByValue</a></strong>(java.lang.String&nbsp;value)</code>
<div class="block">根据combobox中的value值进行选择<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#selectComboBoxByVisibleValue(java.lang.String)">selectComboBoxByVisibleValue</a></strong>(java.lang.String&nbsp;value)</code>
<div class="block">根据combobox标签之间的内容进行选择<br>
 例如：<option value="foo">Bar</option> 那么参数就是Bar<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#selectTopFrame()">selectTopFrame</a></strong>()</code>
<div class="block">选择最上层的Frame或IFrame<br>
 当当前操作在某一个Frame内部时，如果要对其他Frame内的元素进行操作，必须调用本方法，然后再跳到指定Frame<br>
 如果提供的Frame属性值不存在，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#setDriver(phoenix.frame.window.DriverType, java.lang.String)">setDriver</a></strong>(<a href="../../../phoenix/frame/window/DriverType.html" title="phoenix.frame.window中的枚举">DriverType</a>&nbsp;driverType,
         java.lang.String&nbsp;browserPath)</code>
<div class="block">集中管理驱动类型。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#setDriverUserDefine(java.lang.String)">setDriverUserDefine</a></strong>(java.lang.String&nbsp;driverUserDefine)</code>&nbsp;</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#setLocatorInfos(phoenix.frame.property.LocatorInfo)">setLocatorInfos</a></strong>(<a href="../../../phoenix/frame/property/LocatorInfo.html" title="phoenix.frame.property中的类">LocatorInfo</a>&nbsp;locatorInfos)</code>
<div class="block">方法描述：设置元素的定位信息，将根据这些信息进行元素定位。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#setOperateRemark(java.lang.String)">setOperateRemark</a></strong>(java.lang.String&nbsp;operateRemark)</code>
<div class="block">方法描述：对页面单步操作的备注信息设置。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#setProperty(java.lang.String, java.lang.String, java.lang.String, java.lang.String)">setProperty</a></strong>(java.lang.String&nbsp;attribute,
           java.lang.String&nbsp;attriName,
           java.lang.String&nbsp;operate,
           java.lang.String&nbsp;operateRemark)</code>
<div class="block">数据传递类。</div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#setText(java.lang.String)">setText</a></strong>(java.lang.String&nbsp;text)</code>
<div class="block">对可编辑的元素执行写入值操作，需要提供String类型的值<br>
 本方法不支持linkText定位<br>
 取值前先断言该元素是否存在。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#switchToFrame(java.lang.String)">switchToFrame</a></strong>(java.lang.String&nbsp;attriValue)</code>
<div class="block">跳转到指定的Frame或IFrame中<br>
 当当前操作在某一个Frame内部时，如果要对其他Frame内的元素进行操作，必须调用本方法，然后再跳到指定Frame<br>
 如果提供的Frame属性值不存在，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
</td>
</tr>
<tr class="rowColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#upLoad(java.lang.String)">upLoad</a></strong>(java.lang.String&nbsp;localFilePath)</code>
<div class="block">文件上传。</div>
</td>
</tr>
<tr class="altColor">
<td class="colFirst"><code>void</code></td>
<td class="colLast"><code><strong><a href="../../../phoenix/frame/action/Action.html#wait(int)">wait</a></strong>(int&nbsp;ms)</code>
<div class="block">对当前驱动的浏览器执行机械等待操作，等待时间是毫秒<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
</td>
</tr>
</table>
<ul class="blockList">
<li class="blockList"><a name="methods_inherited_from_class_java.lang.Object">
<!--   -->
</a>
<h3>从类继承的方法&nbsp;java.lang.Object</h3>
<code>equals, getClass, hashCode, notify, notifyAll, toString, wait, wait, wait</code></li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
<div class="details">
<ul class="blockList">
<li class="blockList">
<!-- ========= CONSTRUCTOR DETAIL ======== -->
<ul class="blockList">
<li class="blockList"><a name="constructor_detail">
<!--   -->
</a>
<h3>构造器详细资料</h3>
<a name="Action()">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>Action</h4>
<pre>public&nbsp;Action()</pre>
<div class="block">实例化职责链，获取延迟状态。并实例化驱动类型</div>
</li>
</ul>
</li>
</ul>
<!-- ============ METHOD DETAIL ========== -->
<ul class="blockList">
<li class="blockList"><a name="method_detail">
<!--   -->
</a>
<h3>方法详细资料</h3>
<a name="getOperateRemark()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getOperateRemark</h4>
<pre>public&nbsp;java.lang.String&nbsp;getOperateRemark()</pre>
<div class="block">方法描述：对页面单步操作的备注信息获取。用于说明该步骤的作用。<br>
 <em>编写日期：2013年9月9日  下午14:55</em></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7</dd></dl>
</li>
</ul>
<a name="setOperateRemark(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setOperateRemark</h4>
<pre>public&nbsp;void&nbsp;setOperateRemark(java.lang.String&nbsp;operateRemark)</pre>
<div class="block">方法描述：对页面单步操作的备注信息设置。用于说明该步骤的作用。<br>
 步骤的备注信息由单步操作的实例RunCases类提供<br>
 <em>编写日期：2013年9月9日  下午14:55</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7</dd></dl>
</li>
</ul>
<a name="getCaseStepLog()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCaseStepLog</h4>
<pre>public&nbsp;<a href="../../../phoenix/frame/log/CaseStepLog.html" title="phoenix.frame.log中的类">CaseStepLog</a>&nbsp;getCaseStepLog()</pre>
<div class="block">为第三方应用提供获取日志实例的接口</div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="getDriverUserDefine()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDriverUserDefine</h4>
<pre>public&nbsp;java.lang.String&nbsp;getDriverUserDefine()</pre>
<div class="block">为第三方应用提供获知当前使用的驱动类型的接口</div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="setDriverUserDefine(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setDriverUserDefine</h4>
<pre>public&nbsp;void&nbsp;setDriverUserDefine(java.lang.String&nbsp;driverUserDefine)</pre>
</li>
</ul>
<a name="setLocatorInfos(phoenix.frame.property.LocatorInfo)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setLocatorInfos</h4>
<pre>public&nbsp;void&nbsp;setLocatorInfos(<a href="../../../phoenix/frame/property/LocatorInfo.html" title="phoenix.frame.property中的类">LocatorInfo</a>&nbsp;locatorInfos)</pre>
<div class="block">方法描述：设置元素的定位信息，将根据这些信息进行元素定位。<br>
 元素定位信息由RunCases类提供，每一步操作都会提供不同的元素定位数据。<br>
 提供方式：将各种定位信息存放到一个一维数组中，根据存放的数据的位置，判断定位信息数据<br>
 提示：从数据库中获取定位信息的SQL：<code><b>CASE.STEPLOCATOR</b></code> 不能再被更改<br>
 <em>编写日期：2013年9月10日  下午14:55</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7</dd></dl>
</li>
</ul>
<a name="setDriver(phoenix.frame.window.DriverType, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setDriver</h4>
<pre>public&nbsp;void&nbsp;setDriver(<a href="../../../phoenix/frame/window/DriverType.html" title="phoenix.frame.window中的枚举">DriverType</a>&nbsp;driverType,
             java.lang.String&nbsp;browserPath)</pre>
<div class="block">集中管理驱动类型。采用LinkedList存储，每执行一次openNewWindow操作<br>
 框架默认新增一个驱动类型<br>
 日期：2013年8月21日 下午14:00<br></div>
<dl><dt><span class="strong">参数:</span></dt><dd><code></code> - </dd></dl>
</li>
</ul>
<a name="getDriver()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getDriver</h4>
<pre>public&nbsp;org.openqa.selenium.WebDriver&nbsp;getDriver()</pre>
<div class="block">分配驱动类型。将最后一次新增的驱动类型作为当前浏览器的驱动。<br>
 执行过程中保留此驱动，直至该驱动被销毁。即该浏览器窗口被关闭<br></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="DriverSelect()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>DriverSelect</h4>
<pre>public&nbsp;void&nbsp;DriverSelect()</pre>
<div class="block">驱动类型命名。根据配置文件里面配置的类型为驱动类型重新命名。<br>
 之所以与 BrowserSelect() 分离开，是为了方便为其他模块提供驱动类型命名支持。
 <em>编写时间：2013年12月18日 13:29</em></div>
</li>
</ul>
<a name="BrowserSelect()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>BrowserSelect</h4>
<pre>public&nbsp;void&nbsp;BrowserSelect()</pre>
<div class="block">通过配置文件配置驱动类型与程序的路径。<br></div>
</li>
</ul>
<a name="openNewWindow(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>openNewWindow</h4>
<pre>public&nbsp;void&nbsp;openNewWindow(java.lang.String&nbsp;url)</pre>
<div class="block">新开浏览器，创建新的浏览器进程。并保存本次打开的浏览器句柄。<br>
 执行一次openNewWindow操作，将会重新启动一个驱动类型<br></div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>url</code> - </dd></dl>
</li>
</ul>
<a name="isExist()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>isExist</h4>
<pre>public&nbsp;boolean&nbsp;isExist()</pre>
<div class="block">判断元素是否存在的方法。支持多级定位模式。对元素的其他操作之前，都会先进行元素是否存在的判断<br>
 执行时循环遍历定位信息，直至定位到该元素。定位到该元素时，会保存使用的定位类型及使用的定位数据<br>
 对元素的其他操作时，如getText操作，则会直接使用该定位类型及定位数据。加快了页面元素的定位速度<br>
 如果定位次数超过了定位数据组的大小，则停止判断，反馈元素未找到信息<br>
 如果启用了延迟功能，则每次进行定位时都会使用延迟功能。<br><br>
 <em>编写日期：2013年8月22日 上午11:00</em></div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#isExist()">isExist</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">参数:</span></dt><dd><code></code> - </dd>
<dt><span class="strong">返回:</span></dt><dd></dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="getText(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getText</h4>
<pre>public&nbsp;java.lang.String&nbsp;getText(java.lang.String&nbsp;attribute)</pre>
<div class="block">元素取值操作。需要给出元素的属性值<br>
 比如要获取元素的value值，则需要提供元素的value属性<br><br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br>
 <em>编写日期：2013年8月23日上午12:00</em></div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#getText(java.lang.String)">getText</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">参数:</span></dt><dd><code>attribute</code> - </dd>
<dt><span class="strong">返回:</span></dt><dd>obj_value</dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="setText(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setText</h4>
<pre>public&nbsp;void&nbsp;setText(java.lang.String&nbsp;text)</pre>
<div class="block">对可编辑的元素执行写入值操作，需要提供String类型的值<br>
 本方法不支持linkText定位<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 编写日期：2013年8月23日上午12:00</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#setText(java.lang.String)">setText</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">参数:</span></dt><dd><code>text</code> - </dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="click()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>click</h4>
<pre>public&nbsp;void&nbsp;click()</pre>
<div class="block">对元素执行click操作<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:00</em></div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#click()">click</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="getComboBoxSize()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getComboBoxSize</h4>
<pre>public&nbsp;java.lang.String&nbsp;getComboBoxSize()</pre>
<div class="block">获取ComboBox（下拉框）的大小<br>
 以String类型返回大小值，之所以这样做是为了方便与数据库数据的交换<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年9月13日上午15:34</em></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="getComboBoxItems()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getComboBoxItems</h4>
<pre>public&nbsp;java.lang.String[]&nbsp;getComboBoxItems()</pre>
<div class="block">获取ComboBox（下拉框）中所有的条目内容<br>
 以数据形式返回内容<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年9月13日上午15:34</em></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="getComboBoxSelectedValue()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getComboBoxSelectedValue</h4>
<pre>public&nbsp;java.lang.String&nbsp;getComboBoxSelectedValue()</pre>
<div class="block">获取ComboBox（下拉框）中最后一次选择的内容<br>
 以String类型返回内容<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年9月13日上午15:45</em></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="selectComboBoxByVisibleValue(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectComboBoxByVisibleValue</h4>
<pre>public&nbsp;void&nbsp;selectComboBoxByVisibleValue(java.lang.String&nbsp;value)</pre>
<div class="block">根据combobox标签之间的内容进行选择<br>
 例如：<option value="foo">Bar</option> 那么参数就是Bar<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年9月13日上午15:45</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="selectComboBoxByValue(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectComboBoxByValue</h4>
<pre>public&nbsp;void&nbsp;selectComboBoxByValue(java.lang.String&nbsp;value)</pre>
<div class="block">根据combobox中的value值进行选择<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年9月13日上午15:45</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="selectComboBoxByIndex(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectComboBoxByIndex</h4>
<pre>public&nbsp;void&nbsp;selectComboBoxByIndex(java.lang.String&nbsp;index)</pre>
<div class="block">根据combobox中值的顺序进行选择，第一个是条目的值是 0<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年9月13日上午15:45</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="closeWindow()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>closeWindow</h4>
<pre>public&nbsp;void&nbsp;closeWindow()</pre>
<div class="block">关闭当前驱动的浏览器<br>
 只是单纯的退出当前浏览器使用的驱动类型<br>
 如果启用了延迟功能，则执行关闭操作前会执行延迟等待操作<br><br>
 编写日期：2013年8月23日上午12:00</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#closeWindow()">closeWindow</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="closeAllWindows()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>closeAllWindows</h4>
<pre>public&nbsp;void&nbsp;closeAllWindows()</pre>
<div class="block">关闭所有WebDriver启动的浏览器窗口<br>
 获取浏览器使用的WebDriver驱动的链表。采用先打开先关闭方式结束浏览器进程<br>
 如果启用了延迟功能，则退出每一个浏览器进程前都会执行延迟等待操作<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="dealAlert()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>dealAlert</h4>
<pre>public&nbsp;java.lang.String&nbsp;dealAlert()</pre>
<div class="block">消除页面弹出的Alert窗口，并返回Alert窗口上的值<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#dealAlert()">dealAlert</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="runJavaScript(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>runJavaScript</h4>
<pre>public&nbsp;void&nbsp;runJavaScript(java.lang.String&nbsp;script)</pre>
<div class="block">在当前浏览器窗口执行一段JS代码,需要提供String类型JS命令<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#runJavaScript(java.lang.String)">runJavaScript</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="setProperty(java.lang.String, java.lang.String, java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>setProperty</h4>
<pre>public&nbsp;void&nbsp;setProperty(java.lang.String&nbsp;attribute,
               java.lang.String&nbsp;attriName,
               java.lang.String&nbsp;operate,
               java.lang.String&nbsp;operateRemark)</pre>
<div class="block">数据传递类。向Property类传入当前步骤的元素定位类型，元素操作等<br>
 默认向Property传入的值均为null<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="refreshWindow()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>refreshWindow</h4>
<pre>public&nbsp;void&nbsp;refreshWindow()</pre>
<div class="block">对当前驱动下的浏览器窗口执行刷新操作.刷新完成后会有2秒的等待加载时间<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#refreshWindow()">refreshWindow</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="goForward()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>goForward</h4>
<pre>public&nbsp;void&nbsp;goForward()</pre>
<div class="block">对当前驱动下的浏览器窗口模拟前进操作.前进完成后会有2秒的等待加载时间<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#goForward()">goForward</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="goBack()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>goBack</h4>
<pre>public&nbsp;void&nbsp;goBack()</pre>
<div class="block">对当前驱动下的浏览器窗口模拟回退操作.回退完成后会有2秒的等待加载时间<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#goBack()">goBack</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="wait(int)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>wait</h4>
<pre>public&nbsp;void&nbsp;wait(int&nbsp;ms)</pre>
<div class="block">对当前驱动的浏览器执行机械等待操作，等待时间是毫秒<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#wait(int)">wait</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="checkPointStatusAct(java.lang.String, java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>checkPointStatusAct</h4>
<pre>public&nbsp;void&nbsp;checkPointStatusAct(java.lang.String&nbsp;checkPointStatu,
                       java.lang.String&nbsp;checkPointCaseName)</pre>
<div class="block">定义检查点对元素属性检查完成后的行为。<br>
 行为的配置格式为：Pass状态用例:Fail状态用例。用例在实际的操作步骤中进行配置<br>
 根据最后一个检查点的状态判断。若状态为Pass则执行Pass状态的用例，若状态是Fail则执行Fail状态的用例。该方式适用于所有检查点<br>
 若不指定检查点的状态，则根据检查点自己的实例定义的行为执行。<br>
 该方法默认与主用例共用同一个初始的驱动类型。但检查点也可以有自己的驱动类型，但需要检查点自己来启动浏览器。<br>
 检查点用例使用的数据与主用例使用的数据是分开的，执行检查点用例时，主用例处于等待状态，所以，检查点用例执行完成后，还能返回主用例执行余下的操作单元<br><br>
 <em>编写日期：2013年9月12日 17:10</em></div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#checkPointStatusAct(java.lang.String, java.lang.String)">checkPointStatusAct</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">参数:</span></dt><dd><code></code> - </dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="maxCurrentWindow()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>maxCurrentWindow</h4>
<pre>public&nbsp;void&nbsp;maxCurrentWindow()</pre>
<div class="block">最大化当前浏览器窗口<br></div>
</li>
</ul>
<a name="getCurrentURL()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getCurrentURL</h4>
<pre>public&nbsp;java.lang.String&nbsp;getCurrentURL()</pre>
<div class="block">获取浏览器的地址信息<br></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="getBrowserTitle()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getBrowserTitle</h4>
<pre>public&nbsp;java.lang.String&nbsp;getBrowserTitle()</pre>
<div class="block">获取浏览器的标题<br></div>
<dl><dt><span class="strong">返回:</span></dt><dd></dd></dl>
</li>
</ul>
<a name="highLight()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>highLight</h4>
<pre>public&nbsp;void&nbsp;highLight()</pre>
<div class="block">高亮一个元素<br>
 此方法不需要指定元素属性<br><br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br>
 <em>编写日期：2013年8月23日上午12:00</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="mouseOver()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>mouseOver</h4>
<pre>public&nbsp;void&nbsp;mouseOver()</pre>
<div class="block">将鼠标悬浮在元素上方<br>
 此方法不需要指定元素属性<br><br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br>
 <em>编写日期：2013年8月23日上午12:00</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="getTagText()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>getTagText</h4>
<pre>public&nbsp;java.lang.String&nbsp;getTagText()</pre>
<div class="block">元素取值操作。获取元素的innerText值<br>
 此方法不需要指定元素属性<br><br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br>
 <em>编写日期：2013年8月23日上午12:00</em></div>
<dl><dt><span class="strong">参数:</span></dt><dd><code>attribute</code> - </dd>
<dt><span class="strong">返回:</span></dt><dd>obj_value</dd><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="focus()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>focus</h4>
<pre>public&nbsp;void&nbsp;focus()</pre>
<div class="block">激活首次驱动分配者分配的驱动所启动的浏览器，并使其最前显示<br>
 会向职责链通知当前执行的步骤类型<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#focus()">focus</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
<a name="doubleClick()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>doubleClick</h4>
<pre>public&nbsp;void&nbsp;doubleClick()</pre>
<div class="block">对元素执行doubleClick操作<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:00</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="selectTopFrame()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>selectTopFrame</h4>
<pre>public&nbsp;void&nbsp;selectTopFrame()</pre>
<div class="block">选择最上层的Frame或IFrame<br>
 当当前操作在某一个Frame内部时，如果要对其他Frame内的元素进行操作，必须调用本方法，然后再跳到指定Frame<br>
 如果提供的Frame属性值不存在，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="switchToFrame(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>switchToFrame</h4>
<pre>public&nbsp;void&nbsp;switchToFrame(java.lang.String&nbsp;attriValue)</pre>
<div class="block">跳转到指定的Frame或IFrame中<br>
 当当前操作在某一个Frame内部时，如果要对其他Frame内的元素进行操作，必须调用本方法，然后再跳到指定Frame<br>
 如果提供的Frame属性值不存在，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="fromInputBoxSetText()">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>fromInputBoxSetText</h4>
<pre>public&nbsp;void&nbsp;fromInputBoxSetText()</pre>
<div class="block">通过InputBox向页面特定区域传值<br>
 此方法适用以下场景：1.调试时需要输入验证码        2.需要手动向特定区域传值时<br>
 取值前先断言该元素是否存在。如果首次未定位到该元素，则进行retryTimes次*retryTimeDelay时间循环定位<br>
 如果一直定位不到，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="keyPress(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>keyPress</h4>
<pre>public&nbsp;void&nbsp;keyPress(java.lang.String&nbsp;keys)</pre>
<div class="block">通过直接操作键盘按键输入值<br>
 此方法适用以下场景：1.元素找不到时但需要输入关键字        2.需要操作键盘按键时<br>
 如果发生异常，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="runCommandLine(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>runCommandLine</h4>
<pre>public&nbsp;void&nbsp;runCommandLine(java.lang.String&nbsp;commandLine)</pre>
<div class="block">执行命令行命令,也可以是打包好的程序，但需要指定程序路径 <br>
 如果发生异常，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2013年8月23日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="upLoad(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>upLoad</h4>
<pre>public&nbsp;void&nbsp;upLoad(java.lang.String&nbsp;localFilePath)</pre>
<div class="block">文件上传。用于测试类似Email附件上传的方法 <br>
 如果发生异常，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2014年1月3日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="downLoad(java.lang.String)">
<!--   -->
</a>
<ul class="blockList">
<li class="blockList">
<h4>downLoad</h4>
<pre>public&nbsp;void&nbsp;downLoad(java.lang.String&nbsp;localFilePath)</pre>
<div class="block">文件下载。用于测试类似Email附件下载的方法 <br>
 如果发生异常，则通知职责链，采用WARN级别处理<br><br>
 <em>编写日期：2014年1月3日上午12:30</em></div>
<dl><dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7 及以上</dd></dl>
</li>
</ul>
<a name="gotoWindow(java.lang.String)">
<!--   -->
</a>
<ul class="blockListLast">
<li class="blockList">
<h4>gotoWindow</h4>
<pre>public&nbsp;void&nbsp;gotoWindow(java.lang.String&nbsp;url)</pre>
<div class="block">在当前浏览器窗口，重定向到另一URL地址，无需再次重复打开关闭浏览器<br>
 会向职责链通知当前执行的步骤类型与URL值<br><br>
 编写日期：2013年8月23日 13:24</div>
<dl>
<dt><strong>指定者:</strong></dt>
<dd><code><a href="../../../phoenix/frame/struct/ElementOperate.html#gotoWindow(java.lang.String)">gotoWindow</a></code>&nbsp;在类中&nbsp;<code><a href="../../../phoenix/frame/struct/ElementOperate.html" title="phoenix.frame.struct中的类">ElementOperate</a></code></dd>
<dt><span class="strong">从以下版本开始:</span></dt>
  <dd>JDK 1.7及以上</dd></dl>
</li>
</ul>
</li>
</ul>
</li>
</ul>
</div>
</div>
<!-- ========= END OF CLASS DATA ========= -->
<!-- ======= START OF BOTTOM NAVBAR ====== -->
<div class="bottomNav"><a name="navbar_bottom">
<!--   -->
</a><a href="#skip-navbar_bottom" title="跳过导航链接"></a><a name="navbar_bottom_firstrow">
<!--   -->
</a>
<ul class="navList" title="Navigation">
<li><a href="../../../overview-summary.html">概览</a></li>
<li><a href="package-summary.html">程序包</a></li>
<li class="navBarCell1Rev">类</li>
<li><a href="class-use/Action.html">使用</a></li>
<li><a href="package-tree.html">树</a></li>
<li><a href="../../../deprecated-list.html">已过时</a></li>
<li><a href="../../../index-files/index-1.html">索引</a></li>
<li><a href="../../../help-doc.html">帮助</a></li>
</ul>
</div>
<div class="subNav">
<ul class="navList">
<li>上一个类</li>
<li><a href="../../../phoenix/frame/action/KeyControl.html" title="phoenix.frame.action中的类"><span class="strong">下一个类</span></a></li>
</ul>
<ul class="navList">
<li><a href="../../../index.html?phoenix/frame/action/Action.html" target="_top">框架</a></li>
<li><a href="Action.html" target="_top">无框架</a></li>
</ul>
<ul class="navList" id="allclasses_navbar_bottom">
<li><a href="../../../allclasses-noframe.html">所有类</a></li>
</ul>
<div>
<script type="text/javascript"><!--
  allClassesLink = document.getElementById("allclasses_navbar_bottom");
  if(window==top) {
    allClassesLink.style.display = "block";
  }
  else {
    allClassesLink.style.display = "none";
  }
  //-->
</script>
</div>
<div>
<ul class="subNavList">
<li>概要:&nbsp;</li>
<li>嵌套&nbsp;|&nbsp;</li>
<li>字段&nbsp;|&nbsp;</li>
<li><a href="#constructor_summary">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_summary">方法</a></li>
</ul>
<ul class="subNavList">
<li>详细资料:&nbsp;</li>
<li>字段&nbsp;|&nbsp;</li>
<li><a href="#constructor_detail">构造器</a>&nbsp;|&nbsp;</li>
<li><a href="#method_detail">方法</a></li>
</ul>
</div>
<a name="skip-navbar_bottom">
<!--   -->
</a></div>
<!-- ======== END OF BOTTOM NAVBAR ======= -->
</body>
</html>
